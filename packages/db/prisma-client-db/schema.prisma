// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../prisma-client-db/client-db"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  // url      = env("PG_CLIENT_DB_URL")
  url      = "postgresql://neondb_owner:npg_rzExysLDq76j@ep-steep-dust-a5ftvmab-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require"
  directUrl =  env("PG_CLIENT_DIRECT_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String?  @unique
  name        String? 
  number      String  @unique
  password    String
  Balance Balance[]
  OnRampTransaction OnRampTransaction[]
  SenderP2PTransaction P2PTransaction[] @relation("SenderP2PTransaction")
  ReceiverP2PTransaction P2PTransaction[] @relation("ReceiverP2PTransaction")
  
}

model Merchant {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  name        String?
  auth_type   AuthType   
}

model Balance{
  id Int @id @default(autoincrement())
  userId  Int @unique
  amount Int @default(0)
  locked Int?
  user User @relation(fields: [userId], references: [id])
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  signature String @unique 
  amount    Int
  startTime DateTime
  userId    Int    
  user      User         @relation(fields: [userId], references: [id])
}

model P2PTransaction{
  id Int @id @default(autoincrement())
  senderId Int
  receiverId Int
  amount Int
  message String?
  sender User @relation("SenderP2PTransaction",fields: [senderId] , references: [id])
  receiver User @relation("ReceiverP2PTransaction",fields: [receiverId] , references: [id])
}


enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}


